{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categoriesE","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loadind","state","setState","useEffect","then","imgs","useFetchGifs","imagenes","imagenConUrl","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"yMAGaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAC5B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OACE,uBAAMC,SAXe,SAACC,GAEtBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAACS,GAAD,OAAkBP,GAAlB,mBAAiCO,OAC/CN,EAAc,MAKhB,UACE,8CACA,uBAAOO,KAAK,OAAOC,MAAOT,EAAYU,SAjBrB,SAACP,GACpBF,EAAcE,EAAEQ,OAAOF,c,+BCPdG,EAAO,uCAAG,WAAOC,GAAP,qBAAAC,EAAA,sEAEbC,EAFa,0FAE4EC,UAC7FH,GAHiB,sBAMAI,MAAMF,GANN,cAMbG,EANa,gBAOIA,EAAKC,OAPT,uBAOXC,EAPW,EAOXA,KAPW,kBASZA,EAAKC,KAAI,SAACC,GACf,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXT,IAAKO,EAAIG,OAAOC,iBAAiBX,SAblB,2DAiBZ,8BAjBY,0DAAH,sDCEPY,EAAc,SAAC,GAAuB,EAArBJ,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACvC,OACE,sBAAKa,UAAU,yCAAf,UACE,qBAAKC,IAAKd,EAAKe,IAAKN,IACpB,4BAAIA,QCFGO,EAAU,SAAC,GAAkB,IAAhBlB,EAAe,EAAfA,SACxB,ECF0B,SAACA,GAC3B,MAA0Bd,mBAAS,CAAEqB,KAAM,GAAIY,SAAS,IAAxD,mBAAOC,EAAP,KAAcC,EAAd,KAQA,OANAC,qBAAU,WACRvB,EAAQC,GAAUuB,MAAK,SAACC,GACtBH,EAAS,CAAEd,KAAMiB,EAAML,SAAS,SAEjC,CAACnB,IAEGoB,EDP4BK,CAAazB,GAAnC0B,EAAb,EAAQnB,KAAeY,EAAvB,EAAuBA,QAEvB,OACE,qCACE,6BAAKnB,IACJmB,GAAW,2CACZ,qBAAKJ,UAAU,YAAf,SACGW,EAASlB,KAAI,SAACmB,GAAD,OACZ,cAAC,EAAD,eAAuCA,GAArBA,EAAajB,aEQ1BkB,EAjBM,WACnB,MAAoC1C,mBAAS,IAA7C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAEA,OACE,qCACE,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BACG4C,EAAWrB,KAAI,SAACR,GAAD,OACd,cAAC,EAAD,CAAwBA,SAAUA,GAApBA,Y,MCTxB8B,IAASC,OAAO,cAAC,EAAD,IAAkBC,SAASC,eAAe,W","file":"static/js/main.d5031a13.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleOnSubmit = (e) => {\n    //evita que se recarga la pagina\n    e.preventDefault();\n\n    if (inputValue.trim().length > 1) {\n      setCategories((categoriesE) => [inputValue, ...categoriesE]);\n      setInputValue(\"\");\n    }\n  };\n  \n  return (\n    <form onSubmit={handleOnSubmit}>\n      <h2>Add Category</h2>\n      <input type=\"text\" value={inputValue} onChange={handleChange} />\n    </form>\n  );\n};\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n","export const getGifs = async (category) => {\n  try {\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=kua7ckiJim07QPyAO3iA0YFUvt0lAq7N&q=${encodeURI(\n      category\n    )}&limit=10`;\n\n    const resp = await fetch(url);\n    const { data } = await resp.json();\n\n    return data.map((img) => {\n      return {\n        id: img.id,\n        title: img.title,\n        url: img.images.downsized_medium.url,\n      };\n    });\n  } catch (error) {\n    return \"No encontro ninguna url...\";\n  }\n};\n","import React from \"react\";\n\nexport const GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className=\"card animate__animated animate__bounce\">\n      <img src={url} alt={title} />\n      <p>{title}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\nimport { GifGridItem } from \"./GifGridItem\";\n\nexport const GifGrid = ({ category }) => {\n  const { data:imagenes, loadind } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3>{category}</h3>\n      {loadind && <p>Loading...</p>}\n      <div className=\"card-grid\">\n        {imagenes.map((imagenConUrl) => (\n          <GifGridItem key={imagenConUrl.id} {...imagenConUrl} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setState] = useState({ data: [], loadind: true });\n\n  useEffect(() => {\n    getGifs(category).then((imgs) => {\n      setState({ data: imgs, loadind: false });\n    });\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport { AddCategory } from \"./components/AddCategory\";\nimport { GifGrid } from \"./components/GifGrid\";\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState([]);\n\n  return (\n    <>\n      <h2>Gif Expert App</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      <ol>\n        {categories.map((category) => (\n          <GifGrid key={category} category={category} />\n        ))}\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport GifExpertApp from \"./GifExpertApp\";\nimport \"./index.css\";\n\nReactDOM.render(<GifExpertApp />, document.getElementById(\"root\"));\n"],"sourceRoot":""}